worker_processes 1;

events { worker_connections 1024; }
error_log /dev/stdout debug;

http {

    sendfile on;

    upstream udagram-user {
        server user-service:8080; # backened-user will be the service name in docker-compose file or k8s deployment file
    }

    upstream udagram-feed {
        server feed-service:8080;
    }
    
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;

   # Udagram Reverse Proxy  
    server {
        #The service that the docker container will load up will be listening for requests that come in to port 8080
        listen 8080;

        #Any requests that have been appended with /api/v0/user endpoint we forward the request to http://udagram-user
        #http://udagram-user with updatream http://user-service:8080 is the exact enpoint you may/can use to test the pod by curing this enpoint after you have connected into the pod in k8s. eg http://user-service:8080/health
        location /api/v0/user {
            # 'udagram-user' will be the name of the service that will expose the user cluster pod in the k8s for consumption.
            # Remember that you can only access a pod through the service! Pods are not exposed to the public. You can confirm in the k8s service with of type "ClisterIP"
            proxy_pass http://udagram-user;
        }
        location /api/v0/feed {
            proxy_pass http://udagram-feed;
        }
    }
}
